#include <avr/io.h>  
#include <stdint.h>
#define SPS 4800UL  // частота дискретизации
#define Trc 0.0018f  // постоянная времени фильтра
#define K (SPS*Trc) // постоянный коэффициент

void ADC_INIT() // конфигурирование АЦП
{
    ADCSRA |= (1<<7); // Бит ADEN=1 включение АЦП
    ADCSRA |= (1<<2) | (1<<1) | (1<<0); // ADPS0..2=111,  предделитель - CLK/128
    ADCSRA |= (1<<5);  //  ADATE=1, запуск ФЦП по прерыванию
    SFIOR &= -(1<<7) & (1<<6) & -(1<<0); // ADTS2..0=010 — запуск от внеш. прерывания INT0 
    ADMUX &= (1<<7) | (1<<6); // выбор ИОН, 11 - внутренний ИОН 1.1В
    ADMUX &= (1<<0); // выбор 0-го входа мультиплексора
    ADMUX &= (1<<5); // выравние рез-та по левому краю
}

int main(void)
{
    ADC_INIT(); 
    ADCSRA |= (1<<6);  // запуск преобразования
    DDRD = 0xFF; // режим регистра D - выход
    DDRC = 0xFF; // режим регистра C - выход
	uint32_t Dacc = 0; // устанавливаем начальное средее значение
	uint16_t Dout = 0; // выходное значение фильтра

while (1)
      {
        if (ADCSRA & (1<<4)) // флаг прерывания от АЦП
        {  
			// ADCL и ADCH - верх-й и нижн-й р-ры с результатом преобразования АЦП			
			uint8_t lowADC = ADCL;
			uint16_t Din = ADCH << 8 | lowADC;
			Dacc = Dacc + Din - Dout; // расчет скользящего среднего
			Dout = Dacc / (uint32_t)K;
			PORTD = (uint8_t)Dout; // результат записываем в р-р порта D (мл.байт)
			PORTC = (uint8_t)(Dout >> 8); // // в р-р порта С записываем ст. байт
			ADCSRA |= (1<<4);  // Бит ADIF - флаг прерывания от АЦП
        }
      }
}